1. docker info                                             -- lists all info/ properties of docker like cpu, process
2. sudo service docker start/stop/status                   -- starting the docker engine
3. docker run --rm=false -i -t ubuntu:latest /bin/bash     -- To launch an interactive container
      Note:
        • –i flag -> to make an interactive connection using standard input (STDIN) in container.
         • –t flag -> to assign a pseudo terminal/TTY inside the container that attaches stdin and stdout.
          • --rm=false -> to automatically remove the container when it exits. Usually, we use --rm flag for
              commands that run-in foreground, to clean up the container after the command has completed
              
4. ps aux -- To list the processes running on the container
5. ctrl+P+Q -- to exit from container without killing
6. ps -a -- to list all terminated and running containers
7. docker update --cpu-shares 512 -m 10M --memory-swap -1 <container Id> --To update the container’s CPU Shares and memory configuration 
8. docker inspect <container id> -- to verify the updated cpu share
9. docker run --name my_daemonized -d ubuntu /bin/sh -c "while true; do echo my daemonized
container; sleep 1; done "  -- To launch a daemonized container
  A simple while loop is used in an ubuntu bash shell to create an ongoing background process to print my
        daemonized container with a lag of 1 second.
          Note:
              • -d flag -> to run a container in the background.
              • --name=container_name -> to assign a user-defined name to container.
 10. docker logs my_daemonized -- to see standard output of conainer running in background
 11. docker exec -d my_daemonized mkdir /tmp/test -- creating a dir in a conatainer background
 12. docker pull <image_name>: tag  -- to pull images from dockerhub
 13. docker run -d -p 5000:5000 --restart=always --name registry registry:2 --You can run the local registry
 14. systemctl status docker - registry -- to observe the status
 15.docker tag ubuntu:12.04 ubuntuproj:ver1 -- adding tag to the images
 16. docker commit -m "version 1.1" -a "raushan" ubuntuproj ubuntu:1.1  -- commiting a new version of image to re-use/ customizing
 17. docker run -d --name web -p 80:80 httpd 
 18. docker inspect web |grep IPAddress  -- to ip of container
19. curl –s http://<IPAddress of Container>:<Container port>  - to access webpage
20. docker run --name db -e MYSQL_ROOT_PASSWORD=password -d mysql:latest -- running a db cotaininer
21. docker run -d -P --name myweb --link db:webdb tomcat  -- linking contianer to db
22. docker inspect -f "{{ .HostConfig.Links }}" myweb -- to show the linking status
volumes
23. docker volume create my-vol  -- create a volume
24. docker volume ls
25. docker volume inspect my-vol
26. docker run -dp 80:80 -- name webapp -v my-vol:/usr/local/apache2/htdocs httpd  - stop the container and mount the volume
27. docker volume rm my-vol and docker volume prune
28. Docker compose

                  version: '3'
                  services:
                        jenkins:
                              container_name: jenkins
                              image: jenkins/jenkins
                              ports:
                                    - "8080 : 8080"
                              volumes:
                                    - "$PWD"/jenkins_home : /var/jenkins_home"
                              networks:
                                    - net
                         remote_host:
                              container_name: 
                              image: 
                              build:
                                 context: centos7
                              networks:
                                    - net
                          db_host:
                              ocntainer-name:
                              image:
                              environment:
                                     - "my_sql_password = 1234"
                              volumes:
                                    - "$PWD/db_data : /var/lin/mysql"
                              networks:
                                    - net
                              
                                    
                                    
                                    
         Sudo chown 1000:1000 jenkins_home -R
         docker-compose up -d
         docker logs -f jenkins
         
    29. Docker file 
    
                  FROM centos
                  MAINTAINER vijaynadicharapu@gmail.com
                  RUN useradd remote_user && \
                        echo "1234" | passwd remote_user --stdin && \
                        mkdir /home/remote_user/.ssh
                        chmod 700 /home/remote-user/.ssh
                  COPY remote-key.pub /home/remote_user/.ssh/authorized_keys
                  RUN chown remote_user: remote_user -R /home/remote-user/.ssh && \
                        chmod 600 /home/remote-user/.ssh/authorized-keys
                  RUN- /usr/sbin/sshd-keygen
                  CMD .user/sbin/sshd -D
                  
                  
                  
   30. BASH script to take sql backup
                  #! /bin/bash
                  mysqldb -u root -h $db_host -P $db_password
                  
                  
               BASH   https://dannyda.com/2020/12/22/what-are-0-etc-in-linux-bash-shell-script-what-do-they-mean-what-are-n-etc/
